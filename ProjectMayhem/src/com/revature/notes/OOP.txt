Inheritance 
	When a programming language allows for a hierarchy of objects.
	Child objects obtain states and behaviors from parent objects.
	Multiple inheritance?? No! (Kind of with interfaces)
	**Look up 'Diamond Problem'**	
Encapsulation
	When you wrap and protect data fields, preventing manipulation outside of the class. 
	Usually require getter and setter methods to change these values.
	Conceal internal state of object. Preserving integrity.	
Polymorphism
	'Many forms'
	The ability for the programming language to be able to tell the 
	difference between objects and methods of the same names with 
	different variable/class types.
	**Overriding - same name, same parameters, different behavior.
	**Overloading - same name, different parameters, different behavior (optional).
	
	(Methods belong to a class or an object. Functions don't belong to anything. There are no functions in Java because there is no global scope)
	
	Multiple "is a" relationship.
	
	Covariance- having that return type be something different that was originally in the parent class.
Abstraction
	Sometimes omitted from pillars of OOP.
	Hiding the implementation details.
	"What it does, NOT how it does it"
	Exposing only functionality.
	Abstract Class - abstract methods have no implementation